# Mirror Image Pattern
package patterns;
import java.util.Scanner;
public class Pattern11 {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
     while(i<=n){
         int spaces=1;
         
         while(spaces<=n-i){
             
             System.out.print(" ");
             spaces=spaces+1;
         }
         int stars=1;
         while(stars<=i){
             System.out.print('*');
             stars=stars+1;
         }
         System.out.println();
         i=i+1;
     }
    }
}


/////////////////////////////////////////////////////////////Code : Mirror Image Number Pattern
Send Feedback
Print the following pattern for the given N number of rows.
Pattern for N = 4




The dots represent spaces.


Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints
0 <= N <= 50
Sample Input 1:
3
Sample Output 1:
      1 
    12
  123
Sample Input 2:
4
Sample Output 2:
      1 
    12
  123
1234
Code : Mirror Image Number Pattern
Send Feedback
Print the following pattern for the given N number of rows.
Pattern for N = 4




The dots represent spaces.


Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints
0 <= N <= 50
Sample Input 1:
3
Sample Output 1:
      1 
    12
  123
Sample Input 2:
4
Sample Output 2:
      1 
    12
  123
1234
import java.util.Scanner;
public class Solution {


	public static void main(String[] args) {
		
		/* Your class should be named Solution.
	 	* Read input as specified in the question.
	 	* Print output as specified in the question.
        
		*/
        
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        
        int i = 1;
        while(i <= n){
       	 	int spaces = 1;
            
            while(spaces <= n - i){
                System.out.print(' ');
                spaces = spaces + 1;
            }
            
            int count = 1;
            
            while(count <= i){
                
                System.out.print(count);
                
                count = count + 1;
            }
             System.out.println();
        	i = i + 1;

        }
				
	}

}

//////////////////////////////////////////////////////////////

# Inverted Triangle

package patterns;
import java.util.Scanner;
public class Pattern10 {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
     while(i<=n){
         int j=1;
         
         while(j<=n-i+1){
             
             System.out.print("*");
             j=j+1;
         }
         
         System.out.println();
         i=i+1;
     }
    }
}

//////////////////////////////////////////////////////////////////////////////////
# Code : Inverted Number Pattern
Send Feedback
Print the following pattern for the given N number of rows.
Pattern for N = 4
4444
333
22
1
Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints :
0 <= N <= 50
Sample Input 1:
5
Sample Output 1:
55555 
4444
333
22
1
Sample Input 2:
6
Sample Output 2:
666666
55555 
4444
333
22
1

import java.util.Scanner;
public class Solution {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
    
     while(i<=n){
         int j=1;
         
         
         while(j<=n-i+1){
             
             System.out.print(n - i + 1);
             j=j+1;
         }
         
         System.out.println();
         i=i+1;
     }
    }
}

////////////////////////////////////////////////////////////////////////////////////////
# Isosceles Triangle


import java.util.Scanner;
public class Pattern10 {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
     while(i<=n){
         int spaces=1;
         
         while(spaces<=n-i){
             
             System.out.print(" ");
             spaces=spaces+1;
         }
         int num=1;
         while(num<=i){
             System.out.print(num);
             num=num+1;
         }
         int dec=i-1;
         while(dec>=1){
             System.out.print(dec);
             dec=dec-1;
         }
         System.out.println();
         i=i+1;
     }
    }
}

////////////////////////////////////////////////////////////////////
