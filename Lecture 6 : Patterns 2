# Mirror Image Pattern
package patterns;
import java.util.Scanner;
public class Pattern11 {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
     while(i<=n){
         int spaces=1;
         
         while(spaces<=n-i){
             
             System.out.print(" ");
             spaces=spaces+1;
         }
         int stars=1;
         while(stars<=i){
             System.out.print('*');
             stars=stars+1;
         }
         System.out.println();
         i=i+1;
     }
    }
}


/////////////////////////////////////////////////////////////Code : Mirror Image Number Pattern
Send Feedback
Print the following pattern for the given N number of rows.
Pattern for N = 4




The dots represent spaces.


Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints
0 <= N <= 50
Sample Input 1:
3
Sample Output 1:
      1 
    12
  123
Sample Input 2:
4
Sample Output 2:
      1 
    12
  123
1234
Code : Mirror Image Number Pattern
Send Feedback
Print the following pattern for the given N number of rows.
Pattern for N = 4




The dots represent spaces.


Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints
0 <= N <= 50
Sample Input 1:
3
Sample Output 1:
      1 
    12
  123
Sample Input 2:
4
Sample Output 2:
      1 
    12
  123
1234
import java.util.Scanner;
public class Solution {


	public static void main(String[] args) {
		
		/* Your class should be named Solution.
	 	* Read input as specified in the question.
	 	* Print output as specified in the question.
        
		*/
        
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        
        int i = 1;
        while(i <= n){
       	 	int spaces = 1;
            
            while(spaces <= n - i){
                System.out.print(' ');
                spaces = spaces + 1;
            }
            
            int count = 1;
            
            while(count <= i){
                
                System.out.print(count);
                
                count = count + 1;
            }
             System.out.println();
        	i = i + 1;

        }
				
	}

}

//////////////////////////////////////////////////////////////

# Inverted Triangle

package patterns;
import java.util.Scanner;
public class Pattern10 {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
     while(i<=n){
         int j=1;
         
         while(j<=n-i+1){
             
             System.out.print("*");
             j=j+1;
         }
         
         System.out.println();
         i=i+1;
     }
    }
}

//////////////////////////////////////////////////////////////////////////////////
# Code : Inverted Number Pattern
Send Feedback
Print the following pattern for the given N number of rows.
Pattern for N = 4
4444
333
22
1
Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints :
0 <= N <= 50
Sample Input 1:
5
Sample Output 1:
55555 
4444
333
22
1
Sample Input 2:
6
Sample Output 2:
666666
55555 
4444
333
22
1

import java.util.Scanner;
public class Solution {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
    
     while(i<=n){
         int j=1;
         
         
         while(j<=n-i+1){
             
             System.out.print(n - i + 1);
             j=j+1;
         }
         
         System.out.println();
         i=i+1;
     }
    }
}

////////////////////////////////////////////////////////////////////////////////////////
# Isosceles Triangle


import java.util.Scanner;
public class Pattern10 {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
     while(i<=n){
         int spaces=1;
         
         while(spaces<=n-i){
             
             System.out.print(" ");
             spaces=spaces+1;
         }
         int num=1;
         while(num<=i){
             System.out.print(num);
             num=num+1;
         }
         int dec=i-1;
         while(dec>=1){
             System.out.print(dec);
             dec=dec-1;
         }
         System.out.println();
         i=i+1;
     }
    }
}

////////////////////////////////////////////////////////////////////

# Code : Star Pattern
Send Feedback
Print the following pattern
Pattern for N = 4



The dots represent spaces.



Input Format :
N (Total no. of rows)
Output Format :
Pattern in N lines
Constraints :
0 <= N <= 50
Sample Input 1 :
3
Sample Output 1 :
   *
  *** 
 *****
Sample Input 2 :
4
Sample Output 2 :
    *
   *** 
  *****
 *******
import java.util.Scanner;
public class Solution {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
     while(i<=n){
         int spaces=1;
         
         while(spaces<=n-i){
             
             System.out.print(" ");
             spaces=spaces+1;
         }
         int num=1;
         while(num<=i){
             System.out.print('*');
             num=num+1;
         }
         int dec=i-1;
         while(dec>=1){
             System.out.print('*');
             dec=dec-1;
         }
         System.out.println();
         i=i+1;
     }
    }
}

/////////////////////////////////////////////////////////////////////////////////
Code : Triangle of Numbers
Send Feedback
Print the following pattern for the given number of rows.
Pattern for N = 4



The dots represent spaces.



Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints :
0 <= N <= 50
Sample Input 1:
5
Sample Output 1:
           1
          232
         34543
        4567654
       567898765
Sample Input 2:
4
Sample Output 2:
           1
          232
      	 34543
        4567654
	
import java.util.Scanner;
public class Solution {
   public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
     while(i<=n){
         int spaces=1;
         
         while(spaces<=n-i){
             
             System.out.print(" ");
             spaces=spaces+1;
         }
         
         int num=1;
         int inc = i;
         while(num <= i){
             System.out.print(num + inc-1);
             num=num+1;
         }
         int dec=2*i-2;
         while(dec >i-1){
             System.out.print(dec);
             dec=dec-1;
         }
         System.out.println();
         i=i+1;
     }
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////

Code : Diamond of stars
Send Feedback
Print the following pattern for the given number of rows.
Note: N is always odd.


Pattern for N = 5



The dots represent spaces.



Input format :
N (Total no. of rows and can only be odd)
Output format :
Pattern in N lines
Constraints :
1 <= N <= 49
Sample Input 1:
5
Sample Output 1:
  *
 ***
*****
 ***
  *
Sample Input 2:
3
Sample Output 2:
  *
 ***
  *
import java.util.Scanner;
public class Solution {
   public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     
       int n=s.nextInt();
     
       int sp = n / 2;
     
       int st = 1;
       
       for(int i = 1; i<= n; i++){
           for(int j = 1; j<= sp; j++){
               System.out.print(" ");
               
           }
           
           for(int j = 1; j<= st; j++){
               System.out.print("*");
           }
           
           if(i<=n/2){
               sp--;
               st+=2;
           }
           
           else{
               sp++;
               st -=2;
           }
           
           System.out.println();
       }
       
       
       
       
    }
}

////////////////////////////////////////////////////////////////////////////////////////

Parallelogram Pattern
Send Feedback
Write a program to print parallelogram pattern for the given N number of rows.
For N = 4



The dots represent spaces.
Input Format :
 A single integer : N
Output Format :
Required Pattern
Constraints :
0 <= N <= 50
Sample Input 1 :
3
Sample Output 1 :
***
 ***
  ***
Sample Input 2 :
5
Sample Output 2 :
*****
 *****
  *****
   *****
    *****

import java.util.Scanner;

public class Main {
	
		
public static void main(String[] args) {
		// Write your code here
        
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        int sp = 0;
        for(int i = 1; i <= n ; i++){
            
            for(int j = 1; j<=sp; j++){
                System.out.print(" ");
            }
            
            if(sp < n){
                sp++;
            }
            for(int j = 1; j<=n; j++){
                
                
                System.out.print("*");
            }
            
            System.out.println();
        }

	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
          Sum Pattern
          
  Write a program to print triangle of user defined integers sum.
Input Format :
A single integer, N
Output Format :
Required Pattern
Constraints :
0 <= N <= 50
Sample Input 1 :
3
Sample Output 1 :
1=1
1+2=3
1+2+3=6
Sample Input 2 :
 5
Sample Output 2 :
1=1
1+2=3
1+2+3=6
1+2+3+4=10
1+2+3+4+5=15  


*/

import java.util.*;
public class Main{
	
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int sum=0;
        sc.close();
		for(int i=1;i<=n;i++)
        {
			for(int k=1;k<=i;k++)
			{	
                
                
                
                if(k==i)
			       System.out.print(k);
                else
                     System.out.print(k+ "+");
                    			       
                    			       
}
            for(int j=1;j<=1;j++)
            {
            	System.out.print("=");
            }
			
			sum=sum+i;
            System.out.println(sum);
        }
    }
	
}
