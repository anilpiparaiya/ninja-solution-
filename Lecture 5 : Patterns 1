# Basic Pattern

n = 4

****
****
****
****

package patterns;
import java.util.Scanner;
public class Pattern1 {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
     while(i<=n){
         int j=1;
         while(j<=n){
             System.out.print("*");
             j=j+1;
         }
         System.out.println();
         i=i+1;
     }
    }
}

*************************************************************************************************************
# Square Patterns
for n = 4

4321
4321
4321
4321


package patterns;
import java.util.Scanner;
public class Pattern4 {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
     while(i<=n){
         int j=1;
         while(j<=n){
             System.out.print(n-j+1);
             j=j+1;
         }
         System.out.println();
         i=i+1;
     }
    }
}

*****************************************************************************************************
# Code : Square Pattern

Print the following pattern for the given N number of rows.
Pattern for N = 4
4444
4444
4444
4444
Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints
0 <= N <= 50
Sample Input 1:
7
Sample Output 1:
7777777
7777777
7777777
7777777
7777777
7777777
7777777
Sample Input 1:
6
Sample Output 1:
666666
666666
666666
666666
666666
666666

import java.util.Scanner;
public class Solution {


	public static void main(String[] args) {
		
		/* Your class should be named Solution.
	 	* Read input as specified in the question.
	 	* Print output as specified in the question.
		*/
        
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        
        for(int i=1; i <=n; i++){
            for(int j = 1; j<=n; j++){
                System.out.print(n);
            }
            System.out.println();
            
        }

		
	}

}

****************************************************************************************************
Triangular Patterns
import java.util.Scanner;
public class Pattern4 {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
     while(i<=n){
         int p=i;
         int j=1;
         while(j<=i){
             System.out.print(p);
             p=p+1;
             j=j+1;
         }
         System.out.println();
         i=i+1;
     }
    }
}


************************************************************************************************
# Triangular Star Patterns

Code : Triangular Star Pattern
Send Feedback
Print the following pattern for the given N number of rows.
Pattern for N = 4
*
**
***
****
Note : There are no spaces between the stars (*).
Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints
0 <= N <= 50
Sample Input 1:
5
Sample Output 1:
*
**
***
****
*****
Sample Input 2:
6
Sample Output 2:
*
**
***
****
*****
******


import java.util.Scanner;
public class Solution {


	public static void main(String[] args) {
		
		/* Your class should be named Solution.
	 	* Read input as specified in the question.
	 	* Print output as specified in the question.
		*/
        
        Scanner input = new Scanner(System.in);
        
        int n = input.nextInt();
        int i = 1;
        
        
        while(i<=n){
            int j = 1;
            while(j<=i){
                System.out.print('*');
                j = j+1;
            } 
            System.out.println();
            i=i+1;
        }

		
	}
}

*********************************************************************************************************************************
Code : Triangle Number Pattern

Print the following pattern for the given N number of rows.
Pattern for N = 4
1
22
333
4444
Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints
0 <= N <= 50
Sample Input 1:
5
Sample Output 1:
1
22
333
4444
55555
Sample Input 2:
6
Sample Output 2:
1
22
333
4444
55555
666666

import java.util.Scanner;
public class Solution {


 public static void main(String[] args) {
		
		/* Your class should be named Solution.
	 	* Read input as specified in the question.
	 	* Print output as specified in the question.
		*/
        
        Scanner input = new Scanner(System.in);
        
        int n = input.nextInt();
        int i = 1;
        
        
        while(i<=n){
            int j = 1;
            while(j<=i){
                System.out.print(i);
                j = j+1;
            } 
            System.out.println();
            i=i+1;
        }

		
	}

}

**********************************************************************************************************************
Code : Reverse Number Pattern

Print the following pattern for the given N number of rows.
Pattern for N = 4
1
21
321
4321
Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints
0 <= N <= 50
Sample Input 1:
5
Sample Output 1:
1
21
321
4321
54321
Sample Input 2:
6
Sample Output 2:
1
21
321
4321
54321
654321



import java.util.Scanner;
public class Solution {


	public static void main(String[] args) {
		
		/* Your class should be named Solution.
	 	* Read input as specified in the question.
	 	* Print output as specified in the question.
		*/

        Scanner input = new Scanner(System.in);   
		int n = input.nextInt();
        int i = 1;
        
        while(i <= n){
            int j = 1;
            int p = i;
            while(j <= i){
                System.out.print(p);
                p--;
                j++;
            }
            System.out.println();
            i++;
        }
        
        
            
        
		
	}

}

*******************************************************************************************************************

Character Patterns 

package patterns;
import java.util.Scanner;
public class Pattern4 {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
     while(i<=n){
         
         int j=1;
         while(j<=n){
             char jthchar=(char)('A'+j-1);
             System.out.print(jthchar);
             
             j=j+1;
         }
         System.out.println();
         i=i+1;
     }
    }
}

***************************************************************************
Code : Alpha Pattern
Send Feedback
Print the following pattern for the given N number of rows.
Pattern for N = 3
 A
 BB
 CCC
Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints
0 <= N <= 26
Sample Input 1:
7
Sample Output 1:
A
BB
CCC
DDDD
EEEEE
FFFFFF
GGGGGGG
Sample Input 2:
6
Sample Output 2:
A
BB
CCC
DDDD
EEEEE
FFFFFF


import java.util.Scanner;
public class Solution {

	public static void main(String[] args) {
		
		/* Your class should be named Solution.
	 	* Read input as specified in the question.
	 	* Print output as specified in the question.
		*/

        Scanner input = new Scanner(System.in);   
		int n = input.nextInt();
        int i = 0;
        char val = 'A';
        while(i <= n - 1){
            int j = 1;
            while(j <= i+1){
                System.out.print((char)(val + i));
                
                j++;
            }
            System.out.println();
            i++;
        }
        
        
            
        
		
	}
}

****************************************************************************************
package patterns;
import java.util.Scanner;
public class Pattern9 {
    public static void main(String args[]) {
     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     int i=1;
     while(i<=n){
         char p=(char)('A'+i-1);
         int j=1;
         while(j<=n){
             
             System.out.print(p);
             p=(char)(p+1);
             j=j+1;
         }
         System.out.println();
         i=i+1;
     }
    }
}

********************************************************************************************************************
Code : Character Pattern
Send Feedback
Print the following pattern for the given N number of rows.
Pattern for N = 4
A
BC
CDE
DEFG
Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints
0 <= N <= 13
Sample Input 1:
5
Sample Output 1:
A
BC
CDE
DEFG
EFGHI
Sample Input 2:
6
Sample Output 2:
A
BC
CDE
DEFG
EFGHI
FGHIJK


import java.util.Scanner;
public class Solution {

	public static void main(String[] args) {
		
		/* Your class should be named Solution.
	 	* Read input as specified in the question.
	 	* Print output as specified in the question.
		*/

        Scanner input = new Scanner(System.in);   
		int n = input.nextInt();
        int i = 0;
        char val = 'A';
       
        while(i <= n-1){
            int j = 0;
            int p = i;
            while(j <= i){
                System.out.print((char)(val + p ));
                p++;
                j++;
            }
            System.out.println();
            i++;
        }
        
        
            
        
		
	}
}

***********************************************************************************************
Code : Interesting Alphabets
Send Feedback
Print the following pattern for the given number of rows.
Pattern for N = 5
E
DE
CDE
BCDE
ABCDE
Input format :
N (Total no. of rows)
Output format :
Pattern in N lines
Constraints
0 <= N <= 26
Sample Input 1:
8
Sample Output 1:
H
GH
FGH
EFGH
DEFGH
CDEFGH
BCDEFGH
ABCDEFGH
Sample Input 2:
7
Sample Output 2:
G
FG
EFG
DEFG
CDEFG
BCDEFG
ABCDEFG


import java.util.Scanner;
public class Solution {

	public static void main(String[] args) {
		
		/* Your class should be named Solution.
	 	* Read input as specified in the question.
	 	* Print output as specified in the question.
		*/

        Scanner input = new Scanner(System.in);   
		int n = input.nextInt();
        int i = 0;
        char val = 'A';
       
        while(i <= n-1){
            int j = 0;
            int p = n-i - 1;
            while(j <= i){
                System.out.print((char)(val + p ));
                p++;
                j++;
            }
            System.out.println();
            i++;
        }
        
        
            
        
		
	}
}

********************************************************************************************************************

THE END
